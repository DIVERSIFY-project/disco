/**
 *
 * This file is part of Disco.
 *
 * Disco is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Disco is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Disco.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 *
 * This file is part of Disco.
 *
 * Disco is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Disco is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Disco. If not, see <http://www.gnu.org/licenses/>.
 */
package eu.diversify.disco.cloudml;

import eu.diversify.disco.controller.problem.Solution;
import eu.diversify.disco.population.Population;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class Gui extends javax.swing.JFrame implements ControllerUI {

    private static final long serialVersionUID = 1L;
    private final CloudMLController controller;

    public Gui(CloudMLController controller) {
        this.controller = controller;
        this.sourceModelListener = new SourceModelListener();
        this.targetModelListener = new TargetModelListener();
        this.controller.addListener(this);

        initComponents();
    }

    public void setFileToLoad(String pathToDeploymentModel) {
        this.fileToLoad.setText(pathToDeploymentModel);
        controller.load(pathToDeploymentModel);
    }

    public void setReference(double reference) {
        this.setPoint.setValue((int) Math.round(reference * 100));
    }

    @Override
    public void onPopulationExtracted(Population description) {
        
    }

    @Override
    public void onErrorWhileExtractingPopulation() {
        JOptionPane.showMessageDialog(Gui.this,
                                      null,
                                      "Unable to extract the descriptive population",
                                      JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void onPopulationDiversified() {
    }

    @Override
    public void onErrorWhileControllingDiversity() {
         JOptionPane.showMessageDialog(Gui.this,
                                          null,
                                          "Unable to adjust the diversity level to " + setPoint.getValue() + " %%",
                                          JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void onDiversityInjected(Solution solution) { 
    }

    @Override
    public void onErrorWhileInjectingDiversity() {
         JOptionPane.showMessageDialog(Gui.this,
                                          null,
                                          "Unable to enact the prescriptive population!",
                                          JOptionPane.ERROR_MESSAGE);
    }

    // FIXME: to move in a proper place 
    public static BufferedImage resize(BufferedImage image, int width, int height, boolean keepAspectRatio) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        // Keep the aspect ratio:
        if (keepAspectRatio) {
            height = (int) (image.getHeight() * (width * 1D / image.getWidth()));
        }
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPoint = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        fileToLoad = new javax.swing.JTextField();
        chooseModel = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        inputVisualisation = new javax.swing.JLabel();
        outputVisualisation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Disco v0.1 - Diversity Controller for CloudML models");

        setPoint.setMajorTickSpacing(10);
        setPoint.setMinorTickSpacing(1);
        setPoint.setPaintLabels(true);
        setPoint.setPaintTicks(true);
        setPoint.setSnapToTicks(true);
        setPoint.setBorder(javax.swing.BorderFactory.createTitledBorder("Desired diversity level (%) :"));
        setPoint.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setPoint.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                referenceUpdated(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("CloudML model:");

        fileToLoad.setText("c:\\Users\\franckc\\mdms.json");
        fileToLoad.setToolTipText("path to the CloudML model you want to load");

        chooseModel.setText("Browse");
        chooseModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleChooseButtonPressed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonPressed(evt);
            }
        });

        inputVisualisation.setText("No CloudML model loaded");
        inputVisualisation.setBorder(javax.swing.BorderFactory.createTitledBorder("Input deployment:"));

        outputVisualisation.setText("No CloudML model loaded yet");
        outputVisualisation.setBorder(javax.swing.BorderFactory.createTitledBorder("Output deployment: "));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(setPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(updateButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fileToLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseModel)
                                .addGap(5, 5, 5)
                                .addComponent(loadButton)))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputVisualisation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputVisualisation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fileToLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooseModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputVisualisation, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputVisualisation, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setPoint.getAccessibleContext().setAccessibleName("Desired diversity level (%) :");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void handleChooseButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleChooseButtonPressed
        JFileChooser chooser = new JFileChooser();
        final int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            final String fileName = chooser.getSelectedFile().getAbsolutePath();
            fileToLoad.setText(fileName);
            controller.load(fileName);
        }
    }//GEN-LAST:event_handleChooseButtonPressed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        controller.control();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void referenceUpdated(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_referenceUpdated
        controller.setReference(setPoint.getValue() / 100D);
    }//GEN-LAST:event_referenceUpdated

    private void loadButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonPressed
        controller.load(fileToLoad.getText());
    }//GEN-LAST:event_loadButtonPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseModel;
    private javax.swing.JTextField fileToLoad;
    private javax.swing.JLabel inputVisualisation;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel outputVisualisation;
    private javax.swing.JSlider setPoint;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    private final SourceModelListener sourceModelListener;
    private final TargetModelListener targetModelListener;

    @Override
    public CloudMLModelListener getSourceModelListener() {
        return sourceModelListener;
    }

    @Override
    public CloudMLModelListener getTargetModelListener() {
        return targetModelListener;
    }

    private void updateModelImage(String fileName, JLabel visualisation) {
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(fileName));
        } catch (IOException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedImage resizedImage = resize(image, visualisation.getWidth(), visualisation.getHeight(), true);//resize the image to 100x100
        ImageIcon icon = new ImageIcon(resizedImage);
        icon.getImage().flush();
        visualisation.setText("");
        visualisation.setIcon(icon);
        Gui.this.repaint();
    }

    private class SourceModelListener implements CloudMLModelListener {

        @Override
        public void onModelLoaded() {
        }

        @Override
        public void onErrorWhileLoadingModel() {
            JOptionPane.showMessageDialog(Gui.this,
                                          null,
                                          "Unable to load the given deployment model!",
                                          JOptionPane.ERROR_MESSAGE);
        }

        @Override
        public void onModelSaved() {
        }

        @Override
        public void onErrorWhileSavingModel() {
        }

        @Override
        public void onVisualisationUpdate(String pathToVisualisation) {
            updateModelImage(pathToVisualisation, inputVisualisation);
        }

        @Override
        public void onErrorWhileGeneratingVisualisation() {
        }
    }

    private class TargetModelListener implements CloudMLModelListener {

        @Override
        public void onModelLoaded() {
        }

        @Override
        public void onErrorWhileLoadingModel() {
        }

        @Override
        public void onModelSaved() {
        }

        @Override
        public void onErrorWhileSavingModel() {
            JOptionPane.showMessageDialog(Gui.this,
                                          null,
                                          "Unable to save the given deployment model!",
                                          JOptionPane.ERROR_MESSAGE);
        }

        @Override
        public void onVisualisationUpdate(String fileName) {
            updateModelImage(fileName, outputVisualisation);
        }

        @Override
        public void onErrorWhileGeneratingVisualisation() {
            JOptionPane.showMessageDialog(Gui.this,
                                          null,
                                          "Unable to build the visualisation of the adjusted deployment model!",
                                          JOptionPane.ERROR_MESSAGE);
        }
    }
}
